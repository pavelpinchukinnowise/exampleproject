/**
 * Forwarding Management API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ErrorResponse } from '../model/errorResponse';
import { GeoLocation } from '../model/geoLocation';
import { GetLocationsByCoordinatesQuery } from '../model/getLocationsByCoordinatesQuery';
import { GetLocationsConnectionResponse } from '../model/getLocationsConnectionResponse';
import { InternalErrorResponse } from '../model/internalErrorResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LocationsService {

    protected basePath = 'http://localhost:5105';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param latitude 
     * @param longitude 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLocationsByCoordinatesEndpoint(latitude: number, longitude: number, observe?: 'body', reportProgress?: boolean): Observable<Array<GeoLocation>>;
    public getLocationsByCoordinatesEndpoint(latitude: number, longitude: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GeoLocation>>>;
    public getLocationsByCoordinatesEndpoint(latitude: number, longitude: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GeoLocation>>>;
    public getLocationsByCoordinatesEndpoint(latitude: number, longitude: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (latitude === null || latitude === undefined) {
            throw new Error('Required parameter latitude was null or undefined when calling getLocationsByCoordinatesEndpoint.');
        }

        if (longitude === null || longitude === undefined) {
            throw new Error('Required parameter longitude was null or undefined when calling getLocationsByCoordinatesEndpoint.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/problem+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<GeoLocation>>('get',`${this.basePath}/api/locations/${encodeURIComponent(String(latitude))}/${encodeURIComponent(String(longitude))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param query 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLocationsByTermEndpoint(query: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GeoLocation>>;
    public getLocationsByTermEndpoint(query: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GeoLocation>>>;
    public getLocationsByTermEndpoint(query: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GeoLocation>>>;
    public getLocationsByTermEndpoint(query: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling getLocationsByTermEndpoint.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('Query', <any>query);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/problem+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<GeoLocation>>('get',`${this.basePath}/api/locations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param startPointLatitude 
     * @param startPointLongitude 
     * @param endPointLatitude 
     * @param endPointLongitude 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLocationsConnectionEndpoint(startPointLatitude: number, startPointLongitude: number, endPointLatitude: number, endPointLongitude: number, observe?: 'body', reportProgress?: boolean): Observable<GetLocationsConnectionResponse>;
    public getLocationsConnectionEndpoint(startPointLatitude: number, startPointLongitude: number, endPointLatitude: number, endPointLongitude: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetLocationsConnectionResponse>>;
    public getLocationsConnectionEndpoint(startPointLatitude: number, startPointLongitude: number, endPointLatitude: number, endPointLongitude: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetLocationsConnectionResponse>>;
    public getLocationsConnectionEndpoint(startPointLatitude: number, startPointLongitude: number, endPointLatitude: number, endPointLongitude: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (startPointLatitude === null || startPointLatitude === undefined) {
            throw new Error('Required parameter startPointLatitude was null or undefined when calling getLocationsConnectionEndpoint.');
        }

        if (startPointLongitude === null || startPointLongitude === undefined) {
            throw new Error('Required parameter startPointLongitude was null or undefined when calling getLocationsConnectionEndpoint.');
        }

        if (endPointLatitude === null || endPointLatitude === undefined) {
            throw new Error('Required parameter endPointLatitude was null or undefined when calling getLocationsConnectionEndpoint.');
        }

        if (endPointLongitude === null || endPointLongitude === undefined) {
            throw new Error('Required parameter endPointLongitude was null or undefined when calling getLocationsConnectionEndpoint.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/problem+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetLocationsConnectionResponse>('get',`${this.basePath}/api/locations/connections/${encodeURIComponent(String(startPointLatitude))},${encodeURIComponent(String(startPointLongitude))}/${encodeURIComponent(String(endPointLatitude))},${encodeURIComponent(String(endPointLongitude))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
